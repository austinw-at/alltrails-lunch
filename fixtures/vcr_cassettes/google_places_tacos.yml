---
http_interactions:
- request:
    method: get
    uri: https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=AIzaSyDQSd210wKX_7cz9MELkxhaEOUhFP0AkSk&keyword=tacos&location=40.2969,-111.6946&radius=2000&type=restaurant
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - maps.googleapis.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Tue, 28 Sep 2021 09:28:32 GMT
      Expires:
      - Tue, 28 Sep 2021 09:33:32 GMT
      Cache-Control:
      - public, max-age=300
      Vary:
      - Accept-Language
      Server:
      - scaffolding on HTTPServer2
      Content-Length:
      - '5165'
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      Server-Timing:
      - gfet4t7; dur=71
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-T051=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443";
        ma=2592000; v="46,43"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICAiaHRtbF9hdHRyaWJ1dGlvbnMiIDogW10sCiAgICJyZXN1bHRzIiA6IFsKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogNDAuMjg5MDc5LAogICAgICAgICAgICAgICAibG5nIiA6IC0xMTEuNjkxMTYwMQogICAgICAgICAgICB9LAogICAgICAgICAgICAidmlld3BvcnQiIDogewogICAgICAgICAgICAgICAibm9ydGhlYXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiA0MC4yOTA0Mjg4Mjk4OTI3MywKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjY4OTgxMDI3MDEwNzMKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgInNvdXRod2VzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogNDAuMjg3NzI5MTcwMTA3MjgsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTExMS42OTI1MDk5Mjk4OTI3CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICB9LAogICAgICAgICAiaWNvbiIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92MS9wbmdfNzEvcmVzdGF1cmFudC03MS5wbmciLAogICAgICAgICAiaWNvbl9iYWNrZ3JvdW5kX2NvbG9yIiA6ICIjRkY5RTY3IiwKICAgICAgICAgImljb25fbWFza19iYXNlX3VyaSIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92Mi9yZXN0YXVyYW50X3BpbmxldCIsCiAgICAgICAgICJuYW1lIiA6ICJMb3MgUm9kcsOtZ3VleiBNZXhpY2FuIEZvb2QiLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiBmYWxzZQogICAgICAgICB9LAogICAgICAgICAicGhvdG9zIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAiaGVpZ2h0IiA6IDMwMjQsCiAgICAgICAgICAgICAgICJodG1sX2F0dHJpYnV0aW9ucyIgOiBbCiAgICAgICAgICAgICAgICAgICJcdTAwM2NhIGhyZWY9XCJodHRwczovL21hcHMuZ29vZ2xlLmNvbS9tYXBzL2NvbnRyaWIvMTA1MjQwNTkwODAzNDQ3NjQwNTQwXCJcdTAwM2VTaGFpbmEgU255ZGVyXHUwMDNjL2FcdTAwM2UiCiAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICJwaG90b19yZWZlcmVuY2UiIDogIkFhcF91RUNnNnRYeFpMdk1UT20yX0IwTDhEV0l6bHFJRDFqWlRpOHRpUWNUeVpEWHEzdFRacnpnNExsc0NEUnF5OVM5TDRiQ0h0V242T0JQT3J1NEJxVE52dmhBSkh4ZFRxeTZxVmhEbUFLQkF3MVl4dW02ZWI5bzJTd28wVTM4ekZaamI0Z3BIdUhWLUxmcnZLaUVSbXdQSi1FT1JwZ2RPaXhwR3NQd0x0aFc5ZkhuRlJKZCIsCiAgICAgICAgICAgICAgICJ3aWR0aCIgOiA0MDMyCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKSFNfNEVzQ2FUWWNSNnhSNWl1NW41VTgiLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIjc4UTUrSkcgT3JlbSwgVXRhaCIsCiAgICAgICAgICAgICJnbG9iYWxfY29kZSIgOiAiODVHQzc4UTUrSkciCiAgICAgICAgIH0sCiAgICAgICAgICJwcmljZV9sZXZlbCIgOiAxLAogICAgICAgICAicmF0aW5nIiA6IDQuMiwKICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2hJSkhTXzRFc0NhVFljUjZ4UjVpdTVuNVU4IiwKICAgICAgICAgInNjb3BlIiA6ICJHT09HTEUiLAogICAgICAgICAidHlwZXMiIDogWyAicmVzdGF1cmFudCIsICJmb29kIiwgInBvaW50X29mX2ludGVyZXN0IiwgImVzdGFibGlzaG1lbnQiIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogMjM2LAogICAgICAgICAidmljaW5pdHkiIDogIjQzNyBTdGF0ZSBTdCwgT3JlbSIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogNDAuMjg4OTY4NywKICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjY5MTcxNDkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogNDAuMjkwMzUxODI5ODkyNzIsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTExMS42OTAyMzMwNzAxMDczCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICJzb3V0aHdlc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDQwLjI4NzY1MjE3MDEwNzI4LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMTEuNjkyOTMyNzI5ODkyNwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgfSwKICAgICAgICAgImljb24iIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjEvcG5nXzcxL3Jlc3RhdXJhbnQtNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvcmVzdGF1cmFudF9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiVGFjbyBUdWVzZGF5J3MiLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiBmYWxzZQogICAgICAgICB9LAogICAgICAgICAicGxhY2VfaWQiIDogIkNoSUpuZVA1Rk95YlRZY1I4U014T0xoNGI3YyIsCiAgICAgICAgICJwbHVzX2NvZGUiIDogewogICAgICAgICAgICAiY29tcG91bmRfY29kZSIgOiAiNzhRNStIOCBPcmVtLCBVdGFoIiwKICAgICAgICAgICAgImdsb2JhbF9jb2RlIiA6ICI4NUdDNzhRNStIOCIKICAgICAgICAgfSwKICAgICAgICAgInJhdGluZyIgOiAwLAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDaElKbmVQNUZPeWJUWWNSOFNNeE9MaDRiN2MiLAogICAgICAgICAic2NvcGUiIDogIkdPT0dMRSIsCiAgICAgICAgICJ0eXBlcyIgOiBbICJyZXN0YXVyYW50IiwgImZvb2QiLCAicG9pbnRfb2ZfaW50ZXJlc3QiLCAiZXN0YWJsaXNobWVudCIgXSwKICAgICAgICAgInVzZXJfcmF0aW5nc190b3RhbCIgOiAwLAogICAgICAgICAidmljaW5pdHkiIDogIjQ0MCBTdGF0ZSBTdCwgT3JlbSIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogNDAuMzEzNTM5MSwKICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjcwMTI3OQogICAgICAgICAgICB9LAogICAgICAgICAgICAidmlld3BvcnQiIDogewogICAgICAgICAgICAgICAibm9ydGhlYXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiA0MC4zMTQ4NjU3Nzk4OTI3MywKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjcwMDAwODA3MDEwNzMKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgInNvdXRod2VzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogNDAuMzEyMTY2MTIwMTA3MjgsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTExMS43MDI3MDc3Mjk4OTI3CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICB9LAogICAgICAgICAiaWNvbiIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92MS9wbmdfNzEvcmVzdGF1cmFudC03MS5wbmciLAogICAgICAgICAiaWNvbl9iYWNrZ3JvdW5kX2NvbG9yIiA6ICIjRkY5RTY3IiwKICAgICAgICAgImljb25fbWFza19iYXNlX3VyaSIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92Mi9yZXN0YXVyYW50X3BpbmxldCIsCiAgICAgICAgICJuYW1lIiA6ICJFbCBTYWJyb3NvIE1leGljYW4gRm9vZCIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IGZhbHNlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogNDAyLAogICAgICAgICAgICAgICAiaHRtbF9hdHRyaWJ1dGlvbnMiIDogWwogICAgICAgICAgICAgICAgICAiXHUwMDNjYSBocmVmPVwiaHR0cHM6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcy9jb250cmliLzExMzI5OTg5MTMwNzE4MjQwOTk0MFwiXHUwMDNlQSBHb29nbGUgVXNlclx1MDAzYy9hXHUwMDNlIgogICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAicGhvdG9fcmVmZXJlbmNlIiA6ICJBYXBfdUVBWktEbnlvRzZTdERza1MtYnJ4bWhLOEdLXzI1dFU3cUxIcVpSWXFPU3gyLXc0cEY3MXBSNGQwNXY3d0JhcThGaUQtSEJRU1lMbFNNWFVxZTBKeXJ1TWZqSUJiUm1ZZHh4X3ozVmppYktTZWVfenNHLWdkbF9ac0xUR3BsZHBhUWhWUTdrbDloek9IZGpHYTNFckExYmhmUmFBQ2pjRkZiUm80MzJNYWFLWVJjRlAiLAogICAgICAgICAgICAgICAid2lkdGgiIDogNzQ0CiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKSFdMVWl4Q0ZUWWNSN0c2MDloTEI4Tk0iLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIjg3N1grQ0YgT3JlbSwgVXRhaCIsCiAgICAgICAgICAgICJnbG9iYWxfY29kZSIgOiAiODVHQzg3N1grQ0YiCiAgICAgICAgIH0sCiAgICAgICAgICJyYXRpbmciIDogNC4yLAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDaElKSFdMVWl4Q0ZUWWNSN0c2MDloTEI4Tk0iLAogICAgICAgICAic2NvcGUiIDogIkdPT0dMRSIsCiAgICAgICAgICJ0eXBlcyIgOiBbICJyZXN0YXVyYW50IiwgImZvb2QiLCAicG9pbnRfb2ZfaW50ZXJlc3QiLCAiZXN0YWJsaXNobWVudCIgXSwKICAgICAgICAgInVzZXJfcmF0aW5nc190b3RhbCIgOiAyNTMsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiODk4IE4gU3RhdGUgU3QsIE9yZW0iCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAgImJ1c2luZXNzX3N0YXR1cyIgOiAiT1BFUkFUSU9OQUwiLAogICAgICAgICAiZ2VvbWV0cnkiIDogewogICAgICAgICAgICAibG9jYXRpb24iIDogewogICAgICAgICAgICAgICAibGF0IiA6IDQwLjMxMTQ1MywKICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjcwMDExODEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogNDAuMzEyODg2MTc5ODkyNzIsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTExMS42OTg3Njc4MjAxMDczCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICJzb3V0aHdlc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDQwLjMxMDE4NjUyMDEwNzI4LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMTEuNzAxNDY3NDc5ODkyNwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgfSwKICAgICAgICAgImljb24iIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjEvcG5nXzcxL3Jlc3RhdXJhbnQtNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvcmVzdGF1cmFudF9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiTWFyaWEgQm9uaXRhIE1leGljYW4gR3JpbGwiLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiBmYWxzZQogICAgICAgICB9LAogICAgICAgICAicGhvdG9zIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAiaGVpZ2h0IiA6IDMwMjUsCiAgICAgICAgICAgICAgICJodG1sX2F0dHJpYnV0aW9ucyIgOiBbCiAgICAgICAgICAgICAgICAgICJcdTAwM2NhIGhyZWY9XCJodHRwczovL21hcHMuZ29vZ2xlLmNvbS9tYXBzL2NvbnRyaWIvMTExMDU2OTY5NTUxMDk5ODE1MTM2XCJcdTAwM2VMb25kb24gUmVpZFx1MDAzYy9hXHUwMDNlIgogICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAicGhvdG9fcmVmZXJlbmNlIiA6ICJBYXBfdUVCUkpSNzlBanZPRmJfOWlabWYyVUZCTm1CWVFVWjRkM1pKcWFzbVhpbDQ5aEZLbmJqSkJHaWFnTm01MU9XSWFRdGxQeEFsTE1OZExDLWc2ZEJhaVBqSTFSOF9uN3ZPTklFVlpmTm81RFBEQjlkcFg0R0RkZTF1U0M0SDFKOVpucEJJQ0xrbXlhM2pweG1icVh2V3VXQTZ5enNzQXFBNmt6cWxQcHUtNjExX0xIM2wiLAogICAgICAgICAgICAgICAid2lkdGgiIDogMzAyNAogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJwbGFjZV9pZCIgOiAiQ2hJSlRlOWV2ekdGVFljUmo5dGRyQnBDZE9jIiwKICAgICAgICAgInBsdXNfY29kZSIgOiB7CiAgICAgICAgICAgICJjb21wb3VuZF9jb2RlIiA6ICI4NzZYK0hYIE9yZW0sIFV0YWgiLAogICAgICAgICAgICAiZ2xvYmFsX2NvZGUiIDogIjg1R0M4NzZYK0hYIgogICAgICAgICB9LAogICAgICAgICAicHJpY2VfbGV2ZWwiIDogMiwKICAgICAgICAgInJhdGluZyIgOiA0LjQsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNoSUpUZTlldnpHRlRZY1JqOXRkckJwQ2RPYyIsCiAgICAgICAgICJzY29wZSIgOiAiR09PR0xFIiwKICAgICAgICAgInR5cGVzIiA6IFsgInJlc3RhdXJhbnQiLCAiZm9vZCIsICJwb2ludF9vZl9pbnRlcmVzdCIsICJlc3RhYmxpc2htZW50IiBdLAogICAgICAgICAidXNlcl9yYXRpbmdzX3RvdGFsIiA6IDMwNzEsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiMzgxNSAxNjcgVyA4MDAgTiwgT3JlbSIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogNDAuMjgxODY2MiwKICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjY4NjI3NzkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogNDAuMjgzMDU3MjI5ODkyNzIsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTExMS42ODQ4Mjk4NzAxMDczCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICJzb3V0aHdlc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDQwLjI4MDM1NzU3MDEwNzI4LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMTEuNjg3NTI5NTI5ODkyNwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgfSwKICAgICAgICAgImljb24iIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjEvcG5nXzcxL3Jlc3RhdXJhbnQtNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvcmVzdGF1cmFudF9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiVmlsbGEgRGVsIFNvbCBcIlJlYWwgTWV4aWNhbiBDdWlzaW5lXCIiLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiBmYWxzZQogICAgICAgICB9LAogICAgICAgICAicGhvdG9zIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAiaGVpZ2h0IiA6IDMwMjQsCiAgICAgICAgICAgICAgICJodG1sX2F0dHJpYnV0aW9ucyIgOiBbCiAgICAgICAgICAgICAgICAgICJcdTAwM2NhIGhyZWY9XCJodHRwczovL21hcHMuZ29vZ2xlLmNvbS9tYXBzL2NvbnRyaWIvMTAyNzEyOTM2NjIzMTcyMjcxNzEzXCJcdTAwM2VNaWFoIHNvcmVuc2VuXHUwMDNjL2FcdTAwM2UiCiAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICJwaG90b19yZWZlcmVuY2UiIDogIkFhcF91RUMzUTY0YUlQWjRUWUpIVjVlWmw2ZHZtdE1NS1dxUjE4MDF1NG5MOTVHeEtUSUpHUWo4NFZhTXd6R0tjVFJ1VmRFakM1cFplemJ5Zko5TTFLZTVFU19zc3VNMmFOZi1WUnpjMGJ2YzFTaE1wUFpfanZmRmxYdnZBTzFoQUpGTTZkQnI5YTF5aDByWm9mWnhWM2o4MVpRWG11ekhTdDgzTkdCOERvSUszN1pQVERvNiIsCiAgICAgICAgICAgICAgICJ3aWR0aCIgOiA0MDMyCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKVFRKaHJaT2FUWWNSRVVRVW1KLTNnTU0iLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIjc4SjcrUEYgT3JlbSwgVXRhaCIsCiAgICAgICAgICAgICJnbG9iYWxfY29kZSIgOiAiODVHQzc4SjcrUEYiCiAgICAgICAgIH0sCiAgICAgICAgICJyYXRpbmciIDogNCwKICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2hJSlRUSmhyWk9hVFljUkVVUVVtSi0zZ01NIiwKICAgICAgICAgInNjb3BlIiA6ICJHT09HTEUiLAogICAgICAgICAidHlwZXMiIDogWyAicmVzdGF1cmFudCIsICJmb29kIiwgInBvaW50X29mX2ludGVyZXN0IiwgImVzdGFibGlzaG1lbnQiIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogMjgxLAogICAgICAgICAidmljaW5pdHkiIDogIjM3MCBFIDgwMCBTLCBPcmVtIgogICAgICB9LAogICAgICB7CiAgICAgICAgICJidXNpbmVzc19zdGF0dXMiIDogIk9QRVJBVElPTkFMIiwKICAgICAgICAgImdlb21ldHJ5IiA6IHsKICAgICAgICAgICAgImxvY2F0aW9uIiA6IHsKICAgICAgICAgICAgICAgImxhdCIgOiA0MC4zMTI0Njc1LAogICAgICAgICAgICAgICAibG5nIiA6IC0xMTEuNzE5MzI4NAogICAgICAgICAgICB9LAogICAgICAgICAgICAidmlld3BvcnQiIDogewogICAgICAgICAgICAgICAibm9ydGhlYXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiA0MC4zMTM4MDY5Nzk4OTI3MiwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjcxNzcxNDI3MDEwNzMKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgInNvdXRod2VzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogNDAuMzExMTA3MzIwMTA3MjgsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTExMS43MjA0MTM5Mjk4OTI3CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICB9LAogICAgICAgICAiaWNvbiIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92MS9wbmdfNzEvcmVzdGF1cmFudC03MS5wbmciLAogICAgICAgICAiaWNvbl9iYWNrZ3JvdW5kX2NvbG9yIiA6ICIjRkY5RTY3IiwKICAgICAgICAgImljb25fbWFza19iYXNlX3VyaSIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92Mi9yZXN0YXVyYW50X3BpbmxldCIsCiAgICAgICAgICJuYW1lIiA6ICJNaWxhZ3JvcyIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IGZhbHNlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogMzQ1NiwKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMDIyMzIzOTAwNTc0OTA0NjkwMzhcIlx1MDAzZVN0ZXBoYW5pZSBDaHJpc3RlbnNlblx1MDAzYy9hXHUwMDNlIgogICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAicGhvdG9fcmVmZXJlbmNlIiA6ICJBYXBfdUVDQXhVZU0wN1Y3WmlibFY4YzN6VHRLMWtsTnFfWUdrODN2YU5YV2UzS0JlY0V5dGR3eFFOcy1yZFNCaGloRXp1UUs1MnJrRlJwVDI2dkp0eTNWTFV5Z2NMWUNTRG9udzVyRzAzUjUxdEF2djlJY2dvbFVxTU9LejQxOXJ3elI3S1lERWNLd1JCVzhrN2dvaWFlYzc2VzZmTXQxOVA1ZnZwa2tZRlRqQ3JLZWo1WlYiLAogICAgICAgICAgICAgICAid2lkdGgiIDogNDYwOAogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJwbGFjZV9pZCIgOiAiQ2hJSmxRN1Y1dG1FVFljUnV4U0NXUWw3SUtFIiwKICAgICAgICAgInBsdXNfY29kZSIgOiB7CiAgICAgICAgICAgICJjb21wb3VuZF9jb2RlIiA6ICI4NzZKK1g3IE9yZW0sIFV0YWgiLAogICAgICAgICAgICAiZ2xvYmFsX2NvZGUiIDogIjg1R0M4NzZKK1g3IgogICAgICAgICB9LAogICAgICAgICAicHJpY2VfbGV2ZWwiIDogMiwKICAgICAgICAgInJhdGluZyIgOiA0LjUsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNoSUpsUTdWNXRtRVRZY1J1eFNDV1FsN0lLRSIsCiAgICAgICAgICJzY29wZSIgOiAiR09PR0xFIiwKICAgICAgICAgInR5cGVzIiA6IFsgInJlc3RhdXJhbnQiLCAiZm9vZCIsICJwb2ludF9vZl9pbnRlcmVzdCIsICJlc3RhYmxpc2htZW50IiBdLAogICAgICAgICAidXNlcl9yYXRpbmdzX3RvdGFsIiA6IDIwMTcsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiOTcwIFcgODAwIE4sIE9yZW0iCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAgImJ1c2luZXNzX3N0YXR1cyIgOiAiT1BFUkFUSU9OQUwiLAogICAgICAgICAiZ2VvbWV0cnkiIDogewogICAgICAgICAgICAibG9jYXRpb24iIDogewogICAgICAgICAgICAgICAibGF0IiA6IDQwLjI3OTA1NjcsCiAgICAgICAgICAgICAgICJsbmciIDogLTExMS43MTYyMzkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogNDAuMjgwNzU4NDc5ODkyNzIsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTExMS43MTMzODgzNQogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAic291dGh3ZXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiA0MC4yNzgwNTg4MjAxMDcyNywKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjcxOTUwNjU1CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICB9LAogICAgICAgICAiaWNvbiIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92MS9wbmdfNzEvcmVzdGF1cmFudC03MS5wbmciLAogICAgICAgICAiaWNvbl9iYWNrZ3JvdW5kX2NvbG9yIiA6ICIjRkY5RTY3IiwKICAgICAgICAgImljb25fbWFza19iYXNlX3VyaSIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92Mi9yZXN0YXVyYW50X3BpbmxldCIsCiAgICAgICAgICJuYW1lIiA6ICJUYWNvIEJlbGwiLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiBmYWxzZQogICAgICAgICB9LAogICAgICAgICAicGhvdG9zIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAiaGVpZ2h0IiA6IDMwMjQsCiAgICAgICAgICAgICAgICJodG1sX2F0dHJpYnV0aW9ucyIgOiBbCiAgICAgICAgICAgICAgICAgICJcdTAwM2NhIGhyZWY9XCJodHRwczovL21hcHMuZ29vZ2xlLmNvbS9tYXBzL2NvbnRyaWIvMTAwOTY5NzIxNjM0Njk0OTg2Nzk5XCJcdTAwM2VLeWxlIEJpbGx5XHUwMDNjL2FcdTAwM2UiCiAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICJwaG90b19yZWZlcmVuY2UiIDogIkFhcF91RUJXdnVsaldqNXY4R1NValgxa2xFMDRiYXp5MnZhNGx1RnIxSXJ2Vk03a3RaeHB0VHNSRHVFX210TEhLRWttay1BeExMRmM2eGxZOWl5a0RvVzdkYmJHUmZaNVR2Q2daRWJoQWNDNjVkYl9XZWRFcEtQb21WeXoxTGpYS3BWV0tiWEYyS1lxV0ZFWEQ2SFZ2UmpnZmRxR2VIU2xUcnlVcjMzQTdTSmtwbEJGTWVWQyIsCiAgICAgICAgICAgICAgICJ3aWR0aCIgOiA0MDMyCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKcXhDRVpoNmJUWWNSenFpWjlVc0lDRVUiLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIjc3SE0rSkcgT3JlbSwgVXRhaCIsCiAgICAgICAgICAgICJnbG9iYWxfY29kZSIgOiAiODVHQzc3SE0rSkciCiAgICAgICAgIH0sCiAgICAgICAgICJwcmljZV9sZXZlbCIgOiAxLAogICAgICAgICAicmF0aW5nIiA6IDMuOCwKICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2hJSnF4Q0VaaDZiVFljUnpxaVo5VXNJQ0VVIiwKICAgICAgICAgInNjb3BlIiA6ICJHT09HTEUiLAogICAgICAgICAidHlwZXMiIDogWyAicmVzdGF1cmFudCIsICJmb29kIiwgInBvaW50X29mX2ludGVyZXN0IiwgImVzdGFibGlzaG1lbnQiIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogMTcxLAogICAgICAgICAidmljaW5pdHkiIDogIjgwMCBXIFVuaXZlcnNpdHkgUGt3eSwgT3JlbSIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogNDAuMjk3ODA5NSwKICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjY5NjYyODUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogNDAuMjk5MTE4MzI5ODkyNzIsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTExMS42OTUyNDQ5MjAxMDczCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICJzb3V0aHdlc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDQwLjI5NjQxODY3MDEwNzI4LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMTEuNjk3OTQ0NTc5ODkyNwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgfSwKICAgICAgICAgImljb24iIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjEvcG5nXzcxL3Jlc3RhdXJhbnQtNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvcmVzdGF1cmFudF9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiQ2FmZSBSaW8gTWV4aWNhbiBHcmlsbCIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IGZhbHNlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogMTM1MCwKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMDQwODM3NDAwMjg4NDYxNzAxMzFcIlx1MDAzZUNhZmUgUmlvIE1leGljYW4gR3JpbGxcdTAwM2MvYVx1MDAzZSIKICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgInBob3RvX3JlZmVyZW5jZSIgOiAiQWFwX3VFRFZTdmZCNklZWVVDUjYzS1FoN3R0R2VaVVd0ZG1fbEpNcDdlREVsandkS1pILThfT2JYRnJCdGZGb1ZmUmRWRWM2Q3RVRUlWbjNsWW5UQ2dWdXB5TUplSHVtWGFrUW9waXVJSGRnU3JEMFotTzluT200TlU4RENmc01fNHY0bVVYRThKN1dnWlNsRWw1WS1PdXJSVWZPckJBcUhKU0h3UWI5aHlabDFQSjFoVHZwIiwKICAgICAgICAgICAgICAgIndpZHRoIiA6IDEwODAKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAicGxhY2VfaWQiIDogIkNoSUpHVjFReWM2YVRZY1I4WDNvVHBmMTBjNCIsCiAgICAgICAgICJwbHVzX2NvZGUiIDogewogICAgICAgICAgICAiY29tcG91bmRfY29kZSIgOiAiNzhYMys0OCBPcmVtLCBVdGFoIiwKICAgICAgICAgICAgImdsb2JhbF9jb2RlIiA6ICI4NUdDNzhYMys0OCIKICAgICAgICAgfSwKICAgICAgICAgInByaWNlX2xldmVsIiA6IDIsCiAgICAgICAgICJyYXRpbmciIDogMy42LAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDaElKR1YxUXljNmFUWWNSOFgzb1RwZjEwYzQiLAogICAgICAgICAic2NvcGUiIDogIkdPT0dMRSIsCiAgICAgICAgICJ0eXBlcyIgOiBbICJyZXN0YXVyYW50IiwgImZvb2QiLCAicG9pbnRfb2ZfaW50ZXJlc3QiLCAiZXN0YWJsaXNobWVudCIgXSwKICAgICAgICAgInVzZXJfcmF0aW5nc190b3RhbCIgOiAyNDc1LAogICAgICAgICAidmljaW5pdHkiIDogIjQwIFcgQ2VudGVyIFN0LCBPcmVtIgogICAgICB9LAogICAgICB7CiAgICAgICAgICJidXNpbmVzc19zdGF0dXMiIDogIk9QRVJBVElPTkFMIiwKICAgICAgICAgImdlb21ldHJ5IiA6IHsKICAgICAgICAgICAgImxvY2F0aW9uIiA6IHsKICAgICAgICAgICAgICAgImxhdCIgOiA0MC4yOTY2OTgxLAogICAgICAgICAgICAgICAibG5nIiA6IC0xMTEuNjk5OTI1OAogICAgICAgICAgICB9LAogICAgICAgICAgICAidmlld3BvcnQiIDogewogICAgICAgICAgICAgICAibm9ydGhlYXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiA0MC4yOTgwNDc4Nzk4OTI3MiwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjY5ODU2NDM3MDEwNzMKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgInNvdXRod2VzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogNDAuMjk1MzQ4MjIwMTA3MjgsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTExMS43MDEyNjQwMjk4OTI3CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICB9LAogICAgICAgICAiaWNvbiIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92MS9wbmdfNzEvcmVzdGF1cmFudC03MS5wbmciLAogICAgICAgICAiaWNvbl9iYWNrZ3JvdW5kX2NvbG9yIiA6ICIjRkY5RTY3IiwKICAgICAgICAgImljb25fbWFza19iYXNlX3VyaSIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92Mi9yZXN0YXVyYW50X3BpbmxldCIsCiAgICAgICAgICJuYW1lIiA6ICJUYWNvIEJlbGwiLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiBmYWxzZQogICAgICAgICB9LAogICAgICAgICAicGhvdG9zIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAiaGVpZ2h0IiA6IDYwMCwKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMTEyODg2NjM2NDUyODk3NTM4ODZcIlx1MDAzZUEgR29vZ2xlIFVzZXJcdTAwM2MvYVx1MDAzZSIKICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgInBob3RvX3JlZmVyZW5jZSIgOiAiQWFwX3VFQXJpY2FZem5KZ2JFLXJ2U0JSUUxJdnRTWXJ1dmlrbWZIZzdFV0ktbDdnQjl5cU9BYy1CX3BpUFBuN0VXWVhMYXB3OEQ1LW04YmJ1SHFxVTFKdG45Q1hvLTJQWWpzQ1BackpDVElic3MyQXpsalVOMjJPRXFNZlZyQ1hIa25wYkRaNEstZk5ZN2hQT01yOU5oSjdBYXBJTXJCa2RmeDBETlJteS1tTllWdEwyOFh1IiwKICAgICAgICAgICAgICAgIndpZHRoIiA6IDYwMAogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJwbGFjZV9pZCIgOiAiQ2hJSkxWVFlsTS1hVFljUkpsMzFsYWdHUVQ0IiwKICAgICAgICAgInBsdXNfY29kZSIgOiB7CiAgICAgICAgICAgICJjb21wb3VuZF9jb2RlIiA6ICI3OFcyK00yIE9yZW0sIFV0YWgiLAogICAgICAgICAgICAiZ2xvYmFsX2NvZGUiIDogIjg1R0M3OFcyK00yIgogICAgICAgICB9LAogICAgICAgICAicHJpY2VfbGV2ZWwiIDogMSwKICAgICAgICAgInJhdGluZyIgOiAzLjgsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNoSUpMVlRZbE0tYVRZY1JKbDMxbGFnR1FUNCIsCiAgICAgICAgICJzY29wZSIgOiAiR09PR0xFIiwKICAgICAgICAgInR5cGVzIiA6IFsKICAgICAgICAgICAgIm1lYWxfdGFrZWF3YXkiLAogICAgICAgICAgICAicmVzdGF1cmFudCIsCiAgICAgICAgICAgICJmb29kIiwKICAgICAgICAgICAgInBvaW50X29mX2ludGVyZXN0IiwKICAgICAgICAgICAgImVzdGFibGlzaG1lbnQiCiAgICAgICAgIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogMTA0NiwKICAgICAgICAgInZpY2luaXR5IiA6ICIxOTUgVyBDZW50ZXIgU3QsIE9yZW0iCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAgImJ1c2luZXNzX3N0YXR1cyIgOiAiT1BFUkFUSU9OQUwiLAogICAgICAgICAiZ2VvbWV0cnkiIDogewogICAgICAgICAgICAibG9jYXRpb24iIDogewogICAgICAgICAgICAgICAibGF0IiA6IDQwLjI3Nzc4OCwKICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjY4NTgxOTQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogNDAuMjc5MDYwMzI5ODkyNzMsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTExMS42ODQ1MTQxNzAxMDczCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICJzb3V0aHdlc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDQwLjI3NjM2MDY3MDEwNzI5LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMTEuNjg3MjEzODI5ODkyNwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgfSwKICAgICAgICAgImljb24iIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjEvcG5nXzcxL3Jlc3RhdXJhbnQtNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvcmVzdGF1cmFudF9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiRGVsIFRhY28iLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiB0cnVlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogMzAwMCwKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMTUxMDYyOTQwNTMyMjgxODQ1MTNcIlx1MDAzZU5hdGUgU29tc2VuXHUwMDNjL2FcdTAwM2UiCiAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICJwaG90b19yZWZlcmVuY2UiIDogIkFhcF91RUE4TjNhbVJ6Sm1MREFBakw4TUI3RmFJV2ZFS3lIQW1xTjB4cFlidUx4Uy1oX3hUZm9iNkcxS0IyeG9XZzZUZEcxanhObVdGQmJXaDhtUUlXS1dBNV9acXJ3b3g5SFA1YlBHUmRiVTE1cW04UUpXdFVtUklXVlI2TWhyWjJfb1NTVlE2VnRIdnFEanZ6OG9ueDVOVkp3eXdfelJ6UXhSakNqdDJra1BxVWF0OUtfWCIsCiAgICAgICAgICAgICAgICJ3aWR0aCIgOiA0MDAwCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKY18wY3ZJMmFUWWNSUnI0Z1B2VkxhczgiLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIjc4SDcrNE0gT3JlbSwgVXRhaCIsCiAgICAgICAgICAgICJnbG9iYWxfY29kZSIgOiAiODVHQzc4SDcrNE0iCiAgICAgICAgIH0sCiAgICAgICAgICJwcmljZV9sZXZlbCIgOiAxLAogICAgICAgICAicmF0aW5nIiA6IDMuOSwKICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2hJSmNfMGN2STJhVFljUlJyNGdQdlZMYXM4IiwKICAgICAgICAgInNjb3BlIiA6ICJHT09HTEUiLAogICAgICAgICAidHlwZXMiIDogWwogICAgICAgICAgICAibWVhbF90YWtlYXdheSIsCiAgICAgICAgICAgICJyZXN0YXVyYW50IiwKICAgICAgICAgICAgImZvb2QiLAogICAgICAgICAgICAicG9pbnRfb2ZfaW50ZXJlc3QiLAogICAgICAgICAgICAiZXN0YWJsaXNobWVudCIKICAgICAgICAgXSwKICAgICAgICAgInVzZXJfcmF0aW5nc190b3RhbCIgOiA5OTQsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiMTA1NSBTIFN0YXRlIFN0LCBPcmVtIgogICAgICB9LAogICAgICB7CiAgICAgICAgICJidXNpbmVzc19zdGF0dXMiIDogIk9QRVJBVElPTkFMIiwKICAgICAgICAgImdlb21ldHJ5IiA6IHsKICAgICAgICAgICAgImxvY2F0aW9uIiA6IHsKICAgICAgICAgICAgICAgImxhdCIgOiA0MC4zMTIzNDA5LAogICAgICAgICAgICAgICAibG5nIiA6IC0xMTEuNzIwODYxNwogICAgICAgICAgICB9LAogICAgICAgICAgICAidmlld3BvcnQiIDogewogICAgICAgICAgICAgICAibm9ydGhlYXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiA0MC4zMTM1MDczMjk4OTI3MiwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjcxOTUzNDU3MDEwNzMKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgInNvdXRod2VzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogNDAuMzEwODA3NjcwMTA3MjgsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTExMS43MjIyMzQyMjk4OTI3CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICB9LAogICAgICAgICAiaWNvbiIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92MS9wbmdfNzEvcmVzdGF1cmFudC03MS5wbmciLAogICAgICAgICAiaWNvbl9iYWNrZ3JvdW5kX2NvbG9yIiA6ICIjRkY5RTY3IiwKICAgICAgICAgImljb25fbWFza19iYXNlX3VyaSIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92Mi9yZXN0YXVyYW50X3BpbmxldCIsCiAgICAgICAgICJuYW1lIiA6ICJUYWNvIFRpbWUiLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiBmYWxzZQogICAgICAgICB9LAogICAgICAgICAicGhvdG9zIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAiaGVpZ2h0IiA6IDQwMzIsCiAgICAgICAgICAgICAgICJodG1sX2F0dHJpYnV0aW9ucyIgOiBbCiAgICAgICAgICAgICAgICAgICJcdTAwM2NhIGhyZWY9XCJodHRwczovL21hcHMuZ29vZ2xlLmNvbS9tYXBzL2NvbnRyaWIvMTAxMzQyNDE5MjY0Mzc0MjE3ODA4XCJcdTAwM2VLZW5uZXRoIFBoYWlyXHUwMDNjL2FcdTAwM2UiCiAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICJwaG90b19yZWZlcmVuY2UiIDogIkFhcF91RUNYODBiWXMyVGItalpRcnJSZzZyYmRvRllDU1lVNktpOEZENkE2UGpZVDd3V2x2NzNDaVd0dXFMLWhZd1NHX1hJYzBBZ3FSMDIzRl90dlRsd3pRZnd0YjVtS18tWmxPR0p0MHB5UjJ5cFd4dDZtQVU5MmFwbEVsbkZqc1oyVzFGTmJHSnZqX0lGbXdfSmhsb1NsWFBRUmxZVEMyQ0IzSzNhdzI0WmFpNmdYanBBMiIsCiAgICAgICAgICAgICAgICJ3aWR0aCIgOiAzMDI0CiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKc3ltVy05bUVUWWNSOW1FS1VQQlk3VWsiLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIjg3NkgrV00gT3JlbSwgVXRhaCIsCiAgICAgICAgICAgICJnbG9iYWxfY29kZSIgOiAiODVHQzg3NkgrV00iCiAgICAgICAgIH0sCiAgICAgICAgICJwcmljZV9sZXZlbCIgOiAxLAogICAgICAgICAicmF0aW5nIiA6IDMuNiwKICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2hJSnN5bVctOW1FVFljUjltRUtVUEJZN1VrIiwKICAgICAgICAgInNjb3BlIiA6ICJHT09HTEUiLAogICAgICAgICAidHlwZXMiIDogWyAicmVzdGF1cmFudCIsICJmb29kIiwgInBvaW50X29mX2ludGVyZXN0IiwgImVzdGFibGlzaG1lbnQiIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogMzAzLAogICAgICAgICAidmljaW5pdHkiIDogIjExMDAgVyA4MDAgTiwgT3JlbSIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogNDAuMzAyNDk0NywKICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjY5Njc1NTQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogNDAuMzAzODEzNzc5ODkyNzEsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTExMS42OTU0Nzc3NzAxMDczCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICJzb3V0aHdlc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDQwLjMwMTExNDEyMDEwNzI3LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMTEuNjk4MTc3NDI5ODkyNwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgfSwKICAgICAgICAgImljb24iIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjEvcG5nXzcxL3Jlc3RhdXJhbnQtNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvcmVzdGF1cmFudF9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiTWFyaXNjb3MgTG9zIENoaW5jaG9ycm9zIiwKICAgICAgICAgIm9wZW5pbmdfaG91cnMiIDogewogICAgICAgICAgICAib3Blbl9ub3ciIDogZmFsc2UKICAgICAgICAgfSwKICAgICAgICAgInBob3RvcyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgImhlaWdodCIgOiAyNjAwLAogICAgICAgICAgICAgICAiaHRtbF9hdHRyaWJ1dGlvbnMiIDogWwogICAgICAgICAgICAgICAgICAiXHUwMDNjYSBocmVmPVwiaHR0cHM6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcy9jb250cmliLzEwNzUwMTY2MjMzOTk4NzU3NDgwNlwiXHUwMDNlTWFyaWFuYSBNYXJ0aW5lelx1MDAzYy9hXHUwMDNlIgogICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAicGhvdG9fcmVmZXJlbmNlIiA6ICJBYXBfdUVBYzdwUlVBV2NJMHZjZlpqaHZrd1RsSXZoM3lVWTFPcm15Rml4a21YZjAzeVdOdVlhQkdqQmN5UkhOTUpGcFptZWxBRmIxOWtrNnBNcGlka2h0RC1aRDBKR0FnZFNKaG8yNm1CTzJWX2xOY2RLdENyYTBnN3VCZFRIeFFKQ3JOQzdvTXRUYlVfcE9SMlpTcXliMFpwcS00TnhXZHZ4RnlWSldibXZmdDdDRUNTaXMiLAogICAgICAgICAgICAgICAid2lkdGgiIDogNDYyNAogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJwbGFjZV9pZCIgOiAiQ2hJSmJWVDJFc3lhVFljUnYtaUNySFkyWFBzIiwKICAgICAgICAgInBsdXNfY29kZSIgOiB7CiAgICAgICAgICAgICJjb21wb3VuZF9jb2RlIiA6ICI4ODIzK1g3IE9yZW0sIFV0YWgiLAogICAgICAgICAgICAiZ2xvYmFsX2NvZGUiIDogIjg1R0M4ODIzK1g3IgogICAgICAgICB9LAogICAgICAgICAicHJpY2VfbGV2ZWwiIDogMiwKICAgICAgICAgInJhdGluZyIgOiA0LjIsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNoSUpiVlQyRXN5YVRZY1J2LWlDckhZMlhQcyIsCiAgICAgICAgICJzY29wZSIgOiAiR09PR0xFIiwKICAgICAgICAgInR5cGVzIiA6IFsgImJhciIsICJyZXN0YXVyYW50IiwgImZvb2QiLCAicG9pbnRfb2ZfaW50ZXJlc3QiLCAiZXN0YWJsaXNobWVudCIgXSwKICAgICAgICAgInVzZXJfcmF0aW5nc190b3RhbCIgOiA3MjcsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiMjk0IE4gU3RhdGUgU3QsIE9yZW0iCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAgImJ1c2luZXNzX3N0YXR1cyIgOiAiT1BFUkFUSU9OQUwiLAogICAgICAgICAiZ2VvbWV0cnkiIDogewogICAgICAgICAgICAibG9jYXRpb24iIDogewogICAgICAgICAgICAgICAibGF0IiA6IDQwLjI5NzM1NDIsCiAgICAgICAgICAgICAgICJsbmciIDogLTExMS42OTcyNTYxCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ2aWV3cG9ydCIgOiB7CiAgICAgICAgICAgICAgICJub3J0aGVhc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDQwLjI5ODY3ODMyOTg5MjcyLAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMTEuNjk1OTA2MDIwMTA3MwogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAic291dGh3ZXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiA0MC4yOTU5Nzg2NzAxMDcyNywKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjY5ODYwNTY3OTg5MjcKICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgIH0sCiAgICAgICAgICJpY29uIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YxL3BuZ183MS9yZXN0YXVyYW50LTcxLnBuZyIsCiAgICAgICAgICJpY29uX2JhY2tncm91bmRfY29sb3IiIDogIiNGRjlFNjciLAogICAgICAgICAiaWNvbl9tYXNrX2Jhc2VfdXJpIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YyL3Jlc3RhdXJhbnRfcGlubGV0IiwKICAgICAgICAgIm5hbWUiIDogIlJhbmNoZXJpdG9zIE1leGljYW4gRm9vZCIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IHRydWUKICAgICAgICAgfSwKICAgICAgICAgInBob3RvcyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgImhlaWdodCIgOiAzMjY0LAogICAgICAgICAgICAgICAiaHRtbF9hdHRyaWJ1dGlvbnMiIDogWwogICAgICAgICAgICAgICAgICAiXHUwMDNjYSBocmVmPVwiaHR0cHM6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcy9jb250cmliLzExNTczNjM1NTY5MjM3NDU5NzE1N1wiXHUwMDNlRCBSeWFuXHUwMDNjL2FcdTAwM2UiCiAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICJwaG90b19yZWZlcmVuY2UiIDogIkFhcF91RUJLbzdLZEdTalJ0cEVHc3EtOFNCaVEyTkQwYzUyQ0NBd2J1M0VTRURBWkdlMFZCTkotQXdpWHdla1hqR2hKSGNvUGhfcE0xZU1aUHZzTlNBQnNVaHBIcXFyVWFtaG9tMThjUy10OE1Qc2RBR0w0LUM5WUhFNG1Ja1I3dmNNNnR4M2dNR2xSRFE0dWxuY2p0R1dfRks2LXZLTlJ5ZEJBdFM5Tlh0aXlfdUM4ejhIOCIsCiAgICAgICAgICAgICAgICJ3aWR0aCIgOiAyNDQ4CiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKZ3dFM2FjLWFUWWNSeXNRejVrc0RxQWsiLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIjc4VzMrVzMgT3JlbSwgVXRhaCIsCiAgICAgICAgICAgICJnbG9iYWxfY29kZSIgOiAiODVHQzc4VzMrVzMiCiAgICAgICAgIH0sCiAgICAgICAgICJwcmljZV9sZXZlbCIgOiAxLAogICAgICAgICAicmF0aW5nIiA6IDMuNiwKICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2hJSmd3RTNhYy1hVFljUnlzUXo1a3NEcUFrIiwKICAgICAgICAgInNjb3BlIiA6ICJHT09HTEUiLAogICAgICAgICAidHlwZXMiIDogWyAicmVzdGF1cmFudCIsICJmb29kIiwgInBvaW50X29mX2ludGVyZXN0IiwgImVzdGFibGlzaG1lbnQiIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogOTcwLAogICAgICAgICAidmljaW5pdHkiIDogIjY2IENlbnRlciBTdCwgT3JlbSIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogNDAuMjc2OTAyOSwKICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjY4NTY4ODUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogNDAuMjc4MTg1NzI5ODkyNzIsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTExMS42ODQ0MjM3NzAxMDczCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICJzb3V0aHdlc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDQwLjI3NTQ4NjA3MDEwNzI4LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMTEuNjg3MTIzNDI5ODkyNwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgfSwKICAgICAgICAgImljb24iIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjEvcG5nXzcxL3Jlc3RhdXJhbnQtNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvcmVzdGF1cmFudF9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiTWkgUmFuY2hpdG8gT3JlbSIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IGZhbHNlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogMTA4MCwKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMDY5MDQzNjI0Mjk2MzM0MTkxMjVcIlx1MDAzZU1pIFJhbmNoaXRvIE1leGljYW4gUmVzdGF1cmFudFx1MDAzYy9hXHUwMDNlIgogICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAicGhvdG9fcmVmZXJlbmNlIiA6ICJBYXBfdUVDNHhGRHBUMkc2QzVuSllqQmg3SVBfQzVESU82T0RRREs4ckFRdHk4TFV4N0tfdUNJMHJwSklCbDRKekZkZUwxaDlQWWpJRm55SWRoSk0xRUlBRVFhVm0tSm9DVTdBMXJCS2JPQ04tMVRSVzFlWUxUYUpBV2tzVTRNWjNFQWdMdjFZSnk2MHB5ZzVOSVE1bk1wNUllN2tZektYZFFlenNWQl9xekNIcWc2TFBjeEkiLAogICAgICAgICAgICAgICAid2lkdGgiIDogMTkyMAogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJwbGFjZV9pZCIgOiAiQ2hJSlktcXV5bzJhVFljUllGYkhjSTlFVGM0IiwKICAgICAgICAgInBsdXNfY29kZSIgOiB7CiAgICAgICAgICAgICJjb21wb3VuZF9jb2RlIiA6ICI3OEc3K1FQIE9yZW0sIFV0YWgiLAogICAgICAgICAgICAiZ2xvYmFsX2NvZGUiIDogIjg1R0M3OEc3K1FQIgogICAgICAgICB9LAogICAgICAgICAicHJpY2VfbGV2ZWwiIDogMiwKICAgICAgICAgInJhdGluZyIgOiA0LjQsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNoSUpZLXF1eW8yYVRZY1JZRmJIY0k5RVRjNCIsCiAgICAgICAgICJzY29wZSIgOiAiR09PR0xFIiwKICAgICAgICAgInR5cGVzIiA6IFsgInJlc3RhdXJhbnQiLCAiZm9vZCIsICJwb2ludF9vZl9pbnRlcmVzdCIsICJlc3RhYmxpc2htZW50IiBdLAogICAgICAgICAidXNlcl9yYXRpbmdzX3RvdGFsIiA6IDE5MDIsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiMTEwOSBTIFN0YXRlIFN0LCBPcmVtIgogICAgICB9LAogICAgICB7CiAgICAgICAgICJidXNpbmVzc19zdGF0dXMiIDogIk9QRVJBVElPTkFMIiwKICAgICAgICAgImdlb21ldHJ5IiA6IHsKICAgICAgICAgICAgImxvY2F0aW9uIiA6IHsKICAgICAgICAgICAgICAgImxhdCIgOiA0MC4yODkwNjIzLAogICAgICAgICAgICAgICAibG5nIiA6IC0xMTEuNjkxMTU1NAogICAgICAgICAgICB9LAogICAgICAgICAgICAidmlld3BvcnQiIDogewogICAgICAgICAgICAgICAibm9ydGhlYXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiA0MC4yOTAzNzcxNzk4OTI3MiwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjY4OTk0NDAyMDEwNzMKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgInNvdXRod2VzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogNDAuMjg3Njc3NTIwMTA3MjgsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTExMS42OTI2NDM2Nzk4OTI3CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICB9LAogICAgICAgICAiaWNvbiIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92MS9wbmdfNzEvcmVzdGF1cmFudC03MS5wbmciLAogICAgICAgICAiaWNvbl9iYWNrZ3JvdW5kX2NvbG9yIiA6ICIjRkY5RTY3IiwKICAgICAgICAgImljb25fbWFza19iYXNlX3VyaSIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92Mi9yZXN0YXVyYW50X3BpbmxldCIsCiAgICAgICAgICJuYW1lIiA6ICJDYXJuaXRhcyBlbCA3IE1hY2hvcyIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IGZhbHNlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogNDAzMiwKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMDY0Njk4NzM0NTQxNTkwMjUwMThcIlx1MDAzZUpvcmdlIEdpbFx1MDAzYy9hXHUwMDNlIgogICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAicGhvdG9fcmVmZXJlbmNlIiA6ICJBYXBfdUVCUmhmd2poR1lCOEtKX1E5YjA1akFTeGNIY1NDSjFRVGpnVnIyRHhyUmJ2VW95RzRBb25IZnNFTTFOczZhUjVTNmVXdnFMWlVoalNGdVFTQlJydjhpbGw3QWw1bDcxTVlaeDRQNWpJRVIweVlGWVp6Y2lFcnhQdWtOdjI4N3FqbGJndFY3UjlGc3FOVkVBb0pJbGk2ajUwSUxsMnlfa3VucDFKaVFsRUtrMGVSankiLAogICAgICAgICAgICAgICAid2lkdGgiIDogMzAyNAogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJwbGFjZV9pZCIgOiAiQ2hJSkwtNThvcTJiVFljUmJPc0xPejFSRXZJIiwKICAgICAgICAgInBsdXNfY29kZSIgOiB7CiAgICAgICAgICAgICJjb21wb3VuZF9jb2RlIiA6ICI3OFE1K0pHIE9yZW0sIFV0YWgiLAogICAgICAgICAgICAiZ2xvYmFsX2NvZGUiIDogIjg1R0M3OFE1K0pHIgogICAgICAgICB9LAogICAgICAgICAicmF0aW5nIiA6IDQuNSwKICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2hJSkwtNThvcTJiVFljUmJPc0xPejFSRXZJIiwKICAgICAgICAgInNjb3BlIiA6ICJHT09HTEUiLAogICAgICAgICAidHlwZXMiIDogWyAicmVzdGF1cmFudCIsICJmb29kIiwgInBvaW50X29mX2ludGVyZXN0IiwgImVzdGFibGlzaG1lbnQiIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogNzcsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiNDM3IFN0YXRlIFN0LCBPcmVtIgogICAgICB9LAogICAgICB7CiAgICAgICAgICJidXNpbmVzc19zdGF0dXMiIDogIk9QRVJBVElPTkFMIiwKICAgICAgICAgImdlb21ldHJ5IiA6IHsKICAgICAgICAgICAgImxvY2F0aW9uIiA6IHsKICAgICAgICAgICAgICAgImxhdCIgOiA0MC4zMDMxODIsCiAgICAgICAgICAgICAgICJsbmciIDogLTExMS42OTY0OTE5CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ2aWV3cG9ydCIgOiB7CiAgICAgICAgICAgICAgICJub3J0aGVhc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDQwLjMwNDQwNTUyOTg5MjcxLAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMTEuNjk1Mjg1MzcwMTA3MwogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAic291dGh3ZXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiA0MC4zMDE3MDU4NzAxMDcyNywKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTExLjY5Nzk4NTAyOTg5MjcKICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgIH0sCiAgICAgICAgICJpY29uIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YxL3BuZ183MS9yZXN0YXVyYW50LTcxLnBuZyIsCiAgICAgICAgICJpY29uX2JhY2tncm91bmRfY29sb3IiIDogIiNGRjlFNjciLAogICAgICAgICAiaWNvbl9tYXNrX2Jhc2VfdXJpIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YyL3Jlc3RhdXJhbnRfcGlubGV0IiwKICAgICAgICAgIm5hbWUiIDogIkZydXRlcmlhIHkgUmVzdGF1cmFudCBMYSBNb3Jlbml0YSIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IGZhbHNlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogMzQ2OCwKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMTUwMDQ1MTk0NjczODU0MDkwNzVcIlx1MDAzZUpvY2VseW4gQWx2YXJlelx1MDAzYy9hXHUwMDNlIgogICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAicGhvdG9fcmVmZXJlbmNlIiA6ICJBYXBfdUVDN2M1SzUtMWFSUElOQjRyR3B1a280N1p2dHZfbnJ1cWRtRm1WTzlPTlkxWFBjenJnRTZnbnJ0VDlfN3ItOXh3eENMOVBmZ3hpUlc2czdRS25RS1FsYW91c1g1Y1ZaalJOYkZyWXhvd24tSUhTeUZLa0dicFpaY0lFRV83SVg3dFIzSnRRQnVfZlF1YTFpejhsX3BDWFpXV3ZCUS05X2ZKSkdnVmhleWZmRDlIWSIsCiAgICAgICAgICAgICAgICJ3aWR0aCIgOiA0NjI0CiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKeVM0VWJjeWFUWWNSTEN6aGhXWXN6aVkiLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIjg4MzMrN0MgT3JlbSwgVXRhaCIsCiAgICAgICAgICAgICJnbG9iYWxfY29kZSIgOiAiODVHQzg4MzMrN0MiCiAgICAgICAgIH0sCiAgICAgICAgICJyYXRpbmciIDogMy45LAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDaElKeVM0VWJjeWFUWWNSTEN6aGhXWXN6aVkiLAogICAgICAgICAic2NvcGUiIDogIkdPT0dMRSIsCiAgICAgICAgICJ0eXBlcyIgOiBbICJyZXN0YXVyYW50IiwgImZvb2QiLCAicG9pbnRfb2ZfaW50ZXJlc3QiLCAiZXN0YWJsaXNobWVudCIgXSwKICAgICAgICAgInVzZXJfcmF0aW5nc190b3RhbCIgOiA5MywKICAgICAgICAgInZpY2luaXR5IiA6ICI0NiBXIDMwMCBOLCBPcmVtIgogICAgICB9CiAgIF0sCiAgICJzdGF0dXMiIDogIk9LIgp9Cg==
  recorded_at: Tue, 28 Sep 2021 09:28:32 GMT
- request:
    method: get
    uri: https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=AIzaSyDQSd210wKX_7cz9MELkxhaEOUhFP0AkSk&keyword=tacos&location=40.2969,-111.6946&radius=2000&type=restaurant
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - maps.googleapis.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Tue, 28 Sep 2021 09:28:32 GMT
      Expires:
      - Tue, 28 Sep 2021 09:33:32 GMT
      Cache-Control:
      - public, max-age=300
      Vary:
      - Accept-Language
      Server:
      - scaffolding on HTTPServer2
      Content-Length:
      - '5153'
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      Server-Timing:
      - gfet4t7; dur=58
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-T051=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443";
        ma=2592000; v="46,43"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 28 Sep 2021 09:28:32 GMT
recorded_with: VCR 6.0.0
